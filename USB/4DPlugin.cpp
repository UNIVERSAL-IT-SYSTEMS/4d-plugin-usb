/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : USB
 #	author : miyako
 #	2015/03/22
 #
 # --------------------------------------------------------------------------------*/

#include "4DPluginAPI.h"
#include "4DPlugin.h"

libusb_context *LIBUSB_CTX = NULL;
bool LIBUSB_READY = false;

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Init/Deinit
    
        case kInitPlugin :
        case kServerInitPlugin :            
            OnInitPlugin();
            break; 

        case kCloseProcess :            
            OnCloseProcess();
            break; 
                
// --- Device

		case 1 :
			USB_DEVICE_LIST(pResult, pParams);
			break;

		case 2 :
			USB_DEVICE_Open(pResult, pParams);
			break;

		case 3 :
			USB_DEVICE_CLOSE(pResult, pParams);
			break;

// --- I/O

		case 4 :
			USB_Write_data(pResult, pParams);
			break;

		case 5 :
			USB_Read_data(pResult, pParams);
			break;

	}
}

// ------------------------------------ Device ------------------------------------

void _addIntProperty(CUTF8String &property, const char* name, int value){
    char buf[11];
    sprintf(buf, "%u", (int)value);
    property += (const uint8_t *)"\""; 
    property += (const uint8_t *)name;
    property += (const uint8_t *)"\""; 
    property += (const uint8_t *)":";     
    property += (const uint8_t *)buf;    
}

void USB_DEVICE_LIST(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_LONGINT Param1;
	ARRAY_LONGINT Param2;
	ARRAY_LONGINT Param3;
	ARRAY_TEXT Param4;

    if(LIBUSB_READY){
    
        Param1.setSize(1);
        Param2.setSize(1);
        Param3.setSize(1);
        Param4.setSize(1);
        
        libusb_device **devs;
        ssize_t cnt = libusb_get_device_list(LIBUSB_CTX, &devs);
        
        libusb_device_descriptor desc;
        CUTF8String alternateSetting, endpoint;
        for(ssize_t i = 0; i < cnt; ++i){
            if(!libusb_get_device_descriptor(devs[i], &desc)){
            
                libusb_device *dev = devs[i];
                
                Param1.appendIntValue((int)desc.idVendor);
                Param2.appendIntValue((int)desc.idProduct);

                libusb_config_descriptor *config;
                const libusb_interface *inter;
                const libusb_interface_descriptor *interdesc;
                const libusb_endpoint_descriptor *epdesc;
                                
                if(!libusb_get_config_descriptor(dev, 0, &config)){
                
                    Param3.appendIntValue(config->bNumInterfaces);
                    
                    endpoint  = (const uint8_t *)"{\n";
                    _addIntProperty(endpoint, "NumInterfaces", config->bNumInterfaces);
                    endpoint += (const uint8_t *)",\n";  
                    endpoint += (const uint8_t *)"\"Interfaces\":["; 
                    
                    for(int j = 0; j < (int)config->bNumInterfaces; ++j){

                        inter = &config->interface[j];
                        
                        if(j){
                            endpoint += (const uint8_t *)",\n\t"; 
                        }
                        
                        endpoint += (const uint8_t *)"{\n\t";
                            
                        _addIntProperty(endpoint, "NumSettings", inter->num_altsetting);
                        endpoint += (const uint8_t *)",\n\t";  
                        endpoint += (const uint8_t *)"\"Settings\":["; 
                        
                        for(int k = 0; k < inter->num_altsetting; ++k){
                        
                            interdesc = &inter->altsetting[k]; 
                            
                            if(k){
                                endpoint += (const uint8_t *)",\n\t\t"; 
                            }
                            
                            endpoint += (const uint8_t *)"{\n\t\t";
                            
                            _addIntProperty(endpoint, "NumEndpoints", interdesc->bNumEndpoints); 
                            endpoint += (const uint8_t *)",\n\t\t"; 
                            
                            endpoint += (const uint8_t *)"\"Endpoints\":["; 
                            for(int l = 0; l < (int)interdesc->bNumEndpoints; ++l){ 
                               
                                epdesc = &interdesc->endpoint[l];    
                                
                                if(l){
                                    endpoint += (const uint8_t *)",\n\t\t\t"; 
                                }                        
                                    
                                endpoint += (const uint8_t *)"{\n\t\t\t"; 
                                  
                                _addIntProperty(endpoint, "Length", epdesc->bLength); 
                                endpoint += (const uint8_t *)",\n\t\t\t"; 
                                
                                _addIntProperty(endpoint, "DescriptorType", epdesc->bDescriptorType); 
                                endpoint += (const uint8_t *)",\n\t\t\t"; 
                                
                                _addIntProperty(endpoint, "EndpointAddress", epdesc->bEndpointAddress); 
                                endpoint += (const uint8_t *)",\n\t\t\t"; 
                                
                                _addIntProperty(endpoint, "Attributes", epdesc->bmAttributes); 
                                endpoint += (const uint8_t *)",\n\t\t\t"; 
                                
                                _addIntProperty(endpoint, "MaxPacketSize", epdesc->wMaxPacketSize); 
                                endpoint += (const uint8_t *)",\n\t\t\t"; 
                                
                                _addIntProperty(endpoint, "Interval", epdesc->bInterval); 
                                endpoint += (const uint8_t *)",\n\t\t\t"; 
                                
                                _addIntProperty(endpoint, "Refresh", epdesc->bRefresh); 
                                endpoint += (const uint8_t *)",\n\t\t\t";     
                                
                                _addIntProperty(endpoint, "SynchAddress", epdesc->bSynchAddress); 
                                       
                                endpoint += (const uint8_t *)"\n\t\t\t}";         
                            }//interdesc->bNumEndpoints 
                            endpoint += (const uint8_t *)"]";   
                             
                            endpoint += (const uint8_t *)"\n\t\t}";                                                    
                        }//inter->num_altsetting
                        endpoint += (const uint8_t *)"]";  
                             
                        endpoint += (const uint8_t *)"\n\t}";      
                    }//config->bNumInterfaces
                    
                    endpoint += (const uint8_t *)"]"; 
                    endpoint += (const uint8_t *)"\n}";
                    
                    libusb_free_config_descriptor(config);
                                    
                }else{
                    //can happen on windows
                    Param3.appendIntValue(0);
					endpoint = (const uint8_t *)"{\n\"NumInterfaces\":0,\n\"Interfaces\":[]\n}";
                }
                Param4.appendUTF8String(&endpoint);  
            }
        }
    
        libusb_free_device_list(devs, 1);   //free the list, unref the devices in it
    }

	Param1.toParamAtIndex(pParams, 1);
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	Param4.toParamAtIndex(pParams, 4);
}

void USB_DEVICE_Open(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_LONGINT Param3;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);

	DeviceOpen(returnValue, Param1, Param2, Param3);

	returnValue.setReturn(pResult);
}

void USB_DEVICE_CLOSE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	DeviceClose(Param1);
}

// -------------------------------------- I/O -------------------------------------

void USB_Write_data(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_BLOB Param3;
	C_LONGINT Param4;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);

	USB_T * usb = DeviceGet(Param1);

    if(usb){
    
        libusb_device_handle *dev_handle = usb->dev;
    //  int interface_number = usb->interface_number;
        int actual;
        unsigned int endpoint = Param2.getIntValue();
        unsigned int length = Param3.getBytesLength();  
        unsigned int timeout = Param4.getIntValue();   
                
        int r = libusb_bulk_transfer(dev_handle, 
        (endpoint | LIBUSB_ENDPOINT_OUT), 
        (unsigned char *)Param3.getBytesPtr(), 
        length, 
        &actual, 
        timeout);
        
        if(!r){
            returnValue.setIntValue(actual);
        }else{
            returnValue.setIntValue(r);
        }
    
    }

	returnValue.setReturn(pResult);
}

void USB_Read_data(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;
	C_LONGINT Param2;
	C_BLOB Param3;
	C_LONGINT Param4;
	C_LONGINT Param5;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);

	USB_T * usb = DeviceGet(Param1);

    if(usb){
    
        libusb_device_handle *dev_handle = usb->dev;
    //  int interface_number = usb->interface_number;
        int actual = 0;
        unsigned int endpoint = Param2.getIntValue();
        unsigned int length = Param4.getIntValue();  
        unsigned int timeout = Param5.getIntValue();        
        
        std::vector<uint8_t> buf(length);	
        
        int r = libusb_bulk_transfer(dev_handle, 
        (endpoint | LIBUSB_ENDPOINT_IN), 
        (unsigned char *)&buf[0], 
        length, 
        &actual, 
        timeout);
        
        if(!r){
            Param3.setBytes((const uint8_t *)&buf[0], actual);
            returnValue.setIntValue(actual);
        }else{
            returnValue.setIntValue(r);
        }
    
    }

	Param3.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

#pragma mark Init/Deinit

process_name_t ON_EXIT_METHOD_PROCESS_NAME;
C_TEXT ON_EXIT_METHOD_PROCESS_NAME_INTERNAL;

void OnInitPlugin(){
    if(!libusb_init(&LIBUSB_CTX)){
        LIBUSB_READY = true;
        libusb_set_debug(LIBUSB_CTX, 3); //set verbosity level to 3, as suggested in the documentation
    }
    
    CUTF8String on_exit_name((const uint8_t *)"$xx");    
    ON_EXIT_METHOD_PROCESS_NAME_INTERNAL.setUTF8String(&on_exit_name);
    ON_EXIT_METHOD_PROCESS_NAME = (process_name_t)ON_EXIT_METHOD_PROCESS_NAME_INTERNAL.getUTF16StringPtr();
}

bool IsProcessOnExit(){    
    C_TEXT name;
    PA_long32 state, time;
    PA_GetProcessInfo(PA_GetCurrentProcessNumber(), name, &state, &time);
    return (0 == PA_CompareUnichars((PA_Unichar *)name.getUTF16StringPtr(), ON_EXIT_METHOD_PROCESS_NAME, 1, 0));
}

void OnCloseProcess(){
    if(LIBUSB_READY){
        if(IsProcessOnExit()){
            libusb_exit(LIBUSB_CTX);
            LIBUSB_CTX = NULL;
        }
    }
}


#pragma mark Reference Management

std::map<uint32_t, USB_T *> _devices;

bool DeviceOpen(C_LONGINT &index, C_LONGINT &vid, C_LONGINT &pid, C_LONGINT &interfaceid){
    
    if(LIBUSB_READY){

        int interface = interfaceid.getIntValue();
        
        libusb_device_handle *dev_handle = libusb_open_device_with_vid_pid(
            LIBUSB_CTX, 
            vid.getIntValue(), 
            pid.getIntValue());
            
        if(dev_handle){
                            
            bool available = false;
            
            if(libusb_kernel_driver_active(dev_handle, interface) == 1){ 
                // find out if kernel driver is attached
                if(libusb_detach_kernel_driver(dev_handle, interface) == 0){
                    // detach it
                    available = true;
                }
            }else{
                available = true;
            }
        
            if(available){   
            
                libusb_claim_interface(dev_handle, interface);
             //   if(!libusb_claim_interface(dev_handle, interface)){
                
                    USB_T *usb = new USB_T;
                    usb->dev = dev_handle;
                    usb->interface_number = interface;
                    
                    unsigned int i = 1;
    
                    while(_devices.find(i) != _devices.end()){
                        i++;
                    }
                    _devices.insert(std::map<uint32_t, USB_T*>::value_type(i, usb));
                    index.setIntValue(i);
                    return true;
            //    }
                
            }else{
                libusb_close(dev_handle);    
            }
            
        }

    } 
    return false;
}

void DeviceClose(C_LONGINT &index){
    
    std::map<uint32_t, USB_T*>::iterator pos = _devices.find(index.getIntValue());
    
    if(pos != _devices.end()){
        USB_T *usb = pos->second;
        
        libusb_release_interface(usb->dev, usb->interface_number);
        libusb_close(usb->dev);
        
        delete usb;
        
        _devices.erase(pos);
    }
    
}

USB_T *DeviceGet(C_LONGINT &index){
    
    USB_T *usb = NULL;
    
    std::map<uint32_t, USB_T*>::iterator pos = _devices.find(index.getIntValue());
    
    if(pos != _devices.end()) {
        usb = pos->second;
    }
    
    return usb;
}